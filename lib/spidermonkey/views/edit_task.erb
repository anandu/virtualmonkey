<!DOCTYPE html>
<html lang="en">
  <head>
    <% @edit ||= nil %>
    <% if (@title ||= nil) %>
      <title><%= @title %></title>
    <% end %>
    <link rel="shortcut icon" href="/favicon2.ico" type="image/x-icon" />
    <link rel="icon" href="/favicon2.ico" type="image/x-icon" />
    <%= VirtualMonkey::JQUERY %>
    <%= VirtualMonkey::JQUERY_UI %>
    <%= VirtualMonkey::MODERNIZR %>
    <%= VirtualMonkey::HTML5_SHIM %>
    <%= VirtualMonkey::INIT_JS %>
    <%= VirtualMonkey::STYLESHEET %>
    <script type="text/javascript">
      var commands = <%= VirtualMonkey::Command::NonInteractiveCommands.to_json %>;
      var all_flags = <%= VirtualMonkey::Command::Flags.to_json %>;
      var command_flags = <%= VirtualMonkey::Command::CommandFlags.to_json %>;
      for (cmd in command_flags) { command_flags[cmd].sort(); }
      var config_opts = <%= VirtualMonkey::Command::ConfigOptions.to_json %>;
      var config_vars = <%= VirtualMonkey::Command::ConfigVariables.to_json %>;
      var collateral_opts = <%= VirtualMonkey::Command::CollateralOptions.to_json %>;
      var environment_presets = <%= VirtualMonkey::Command::EnvironmentPresets.to_json %>;
      var num_options = 0;
      var optFlag = "optionFlag";
      var optVal = "optionVal";

      var sorted_commands = []

      $(function() {
        $("#command").html(function(index,old) {
          var ret = old;
          for (cmd in commands) { sorted_commands.push(cmd); }
          sorted_commands.sort();
          for (index in sorted_commands) {
            cmd = sorted_commands[index];
            ret += "<option value='" + cmd + "'>" + cmd + "</option>\n";
          }
          return ret
        }).change(function() {
          var cmd = $(this).find("option:selected").text();
          var options = "";
          for (index in command_flags[cmd]) {
            flag = command_flags[cmd][index];
            options += "<option value='" + flag + "'>" + flag + "</option>";
          }
          // Reject already selected options that aren't shared by the new command
          $(".command_option").each(function() {
            var div = $(this);
            select = div.find("select");
            selected_option = select.find("option:selected");
            if (command_flags[cmd].indexOf(selected_option.text()) >= 0) {
              select.html(options);
              select.find("option:contains("+selected_option.text()+")").attr("selected", true);
            } else {
              div.remove();
            }
          });
          // TODO - later: Display info in bootstrap pop-up on hover
        });

        function booleanOptionHandler() {
          self = $(this);
          flag = self.find("option:selected").val();
          if (all_flags[flag]) {
            if (all_flags[flag].opts.type === "boolean") {
              self.siblings("input").attr('disabled', 'true');
            }
          }
        }
        // Initialize Deferral
        if ((/^1\.[7-9]/).test($.fn.jquery)) {
          $("#command_edit").on("change", "div.command_option select", booleanOptionHandler);
        } else {
          $("#command_edit").delegate("div.command_option select", "change", booleanOptionHandler);
        }

        // Set up
        $("#add_flag").click(function() {
          cmd = $("#command option:selected").text()
          if (cmd === "") return alert("Please select a command first");
          // Add option div
          num_options++;
          var div = $("<div data-label='Option' id='option" + num_options + "' />");
          var select = $("<select name='" + optFlag + num_options + "' />");
          var input = $("<input type='text' class='large' name='" + optVal + num_options + "' />");
          var del = $("<img src='/img/delete.png' class='action delete_option' />");
          del.click(function() { $(this).parent().remove(); });
          select.append("<option value=''></option>");
          for (index in command_flags[cmd]) {
            flag = command_flags[cmd][index];
            select.append("<option value='" + flag + "'>" + flag + "</option>");
          }
          div.addClass("inline-inputs command_option")
             .append(select).append(input).append(del)
             .wrap("<div class='clearfix' />")
             .wrap("<div class='input' />")
             .attr("name", function(index,old) { return this.id; })
             .before(function(index) { return "<label>" + $(this).attr("data-label") + "</label>"; })
             .insertBefore($(this));
          // TODO - later: hide the text input when a flag is a boolean type of empty
        });

        <% if @edit %>
          var editing_task = <%= @edit.to_json() %>;
          console.log(editing_task)
          for (field in editing_task) {
            switch(field) {
              // Text Fields
              case "name": case "minute": case "hour": case "day":
                $("#"+field).attr("value", editing_task[field]);
                break;

              // Selects - NOTE: skip "command" if "options" exists
              case "command":
                if ("options" in editing_task) { break; }
              case "affinity": case "month": case "weekday":
                $("#"+field).find("option[value='"+editing_task[field]+"']")
                            .attr("selected", true);
                break;

              // Options
              case "options":
                if ("command" in editing_task) {
                  $("#command").find("option[value='"+editing_task["command"]+"']")
                               .attr("selected", true);
                  opts = editing_task["options"];
                  for (flag_name in opts) {
                    switch(typeof opts[flag_name]) {
                      case "string":
                        $("#add_flag").click();
                        optDiv = $("#option" + num_options);
                        optDiv.find("select option[value='"+flag_name+"']").attr("selected", true);
                        if (all_flags[flag_name]) {
                          if (all_flags[flag_name].opts.type === "boolean") {
                            optDiv.find("input").attr('disabled', 'true');
                          } else {
                            optDiv.find("input").attr("value", opts[flag_name]);
                          }
                        } else {
                          console.error("Unknown flag: " + flag_name);
                        }
                        break;
                      case "object":
                        if (opts[flag_name].length) {
                          var i = opts[flag_name].length;
                          while (i--) {
                            $("#add_flag").click();
                            optDiv = $("#option" + num_options);
                            optDiv.find("select option[value='"+flag_name+"']").attr("selected", true);
                            if (all_flags[flag_name]) {
                              if (all_flags[flag_name].opts.type === "boolean") {
                                optDiv.find("input").attr('disabled', 'true');
                              } else {
                                optDiv.find("input").attr("value", opts[flag_name][i]);
                              }
                            } else {
                              console.error("Unknown flag: " + flag_name);
                            }
                          }
                        }
                        break;
                      default:
                        break;
                    }
                  }
                }
                break;

              // Ignore
              default:
                break;
            }
          }
        <% end %>

        function serializeTaskForm() {
          var name_value_data = $("#task_edit").serializeArray();
          var raw_form_data = {};
          console.log(name_value_data);
          for (index in name_value_data) {
            obj = name_value_data[index];
            if (obj.value !== "") {
              raw_form_data[obj.name] = obj.value;
            }
          }
          console.log("raw_data:")
          console.log(raw_form_data);
          var nice_data = {options: {}};
          var flag_regex = new RegExp(optFlag + "(\\d+)", "i");
          var val_regex = new RegExp(optVal + "(\\d+)", "i");

          if ($("#task_type").find("div.active").attr("id") === "command_edit") {
            for (field in raw_form_data) {
              // Transform option data
              if (flag_regex.test(field) && all_flags[raw_form_data[field]]) {
                if (all_flags[raw_form_data[field]].opts.type === "boolean") {
                  nice_data.options[raw_form_data[field]] = true;
                } else {
                  // Ignore, will be grabbed by val_regex
                }
              } else if (val_regex.test(field)) {
                optNum = val_regex.exec(field)[1];
                optName = raw_form_data[optFlag + optNum];
                new_value = raw_form_data[field];
                if (optName in nice_data.options) {
                  if (typeof nice_data.options[optName] === "object") {
                    nice_data.options[optName].push(new_value);
                  } else {
                    nice_data.options[optName] = new Array(nice_data.options[optName], new_value);
                  }
                } else {
                  nice_data.options[optName] = new_value;
                }
              } else if (field !== "affinity") {
                // Reject affinity data
                nice_data[field] = raw_form_data[field];
              }
            }
          } else {
            for (field in raw_form_data) {
              // Reject all command and options from form data
              if (flag_regex.test(field) || val_regex.test(field) || field === "command") {}
              else { nice_data[field] = raw_form_data[field]; }
            }
            // Serialize subtasks
            nice_data["subtask_hrefs"] = []
            $("#subtasks ol li").each(function(index) {
              href = <%= VirtualMonkey::API::Task::PATH.inspect %> + "/" + $(this).attr("data-uid");
              nice_data["subtask_hrefs"].push(href);
            });
          }
          return nice_data;
        }

        // Initialize Buttons
        <% if @edit %>
          $("#update_btn").click(function() {
            nice_data = serializeTaskForm();
            console.log("nice_data:");
            console.log(nice_data);
            $.ajax({
              type: 'PUT',
              url: <%= [VirtualMonkey::API::Task::PATH, @edit.uid].join("/").inspect %>,
              data: nice_data,
              success: function(data) {
                sendMsg({action: "refreshtasks", actions: ["run", "edit", "save", "delete"]});
                $("#update_btn").button('reset');
                sendMsg({action: "closeedit"});
              }
            });
          });
        <% end %>

        $("#create_btn").click(function() {
          nice_data = serializeTaskForm();
          console.log("nice_data:");
          console.log(nice_data);
          $.ajax({
            type: 'POST',
            url: <%= VirtualMonkey::API::Task::PATH.inspect %>,
            data: nice_data,
            success: function(data, textStatus, jqXHR) {
              e = {
                action: "addtask",
                href: jqXHR.getResponseHeader("Location"),
                actions: ["run", "edit", "save", "delete"],
              };
              sendMsg(e);
              $("#update_btn").button('reset');
              sendMsg({action: "closeedit"});
            }
          });
        });

        $("#cancel_btn").click(function() { sendMsg({action: "closeedit"}); });

        <% if @edit %>
          $("#delete_btn").click(function() {
            if (confirm("Are you sure you want to delete this item?")) {
              $.ajax({
                type: 'DELETE',
                url: <%= url(@edit.href).inspect %>,
                success: function(data) {
                  e = {action: "deletetask", uid: <%= @edit.uid.inspect %>}
                  sendMsg(e);
                  $("#update_btn").button('reset');
                  sendMsg({action: "closeedit"});
                }
              });
            }
          });
        <% end %>
      });
    </script>
  </head>
  <body>
    <form id="task_edit" name="task_edit" style="text-align:left">
    <fieldset>
      <legend class="legend">Edit Task</legend>
      <input type="text" class="large init" data-label="Name" id="name" />
      <div id="task_type">
        <ul class="tabs" data-tabs="tabs">
          <li class="active"><a href="#command_edit">Command</a></li>
          <li><a href="#subtask_edit">Other Tasks</a></li>
        </ul>
        <div class="tab-content" id="task_type">
          <div class="active" id="command_edit">
            <select class="init" data-label="Command" id="command">
              <option value=""></option>
            </select>
            <a href="javascript:void(0)" id="add_flag">+ Add Flag...</a>
          </div>
          <div id="subtask_edit">
            <select class="init" data-label="Subtask Affinity" id="affinity">
              <option value="parallel">Parallel Enqueue</option>
              <option value="stop">Stop if one subtask fails</option>
              <option value="continue">Continue even if any subtask fails</option>
            </select>
            <%= yield %>
          </div>
        </div>
      </div>
      <div id="task_schedule">
        <ul class="tabs" data-tabs="tabs">
          <li class="active"><a href="#schedule_edit">Schedule</a></li>
        </ul>
        <div class="tab-content">
          <div class="active" id="schedule_edit">
            <input type="text" class="large init" data-label="Minute" id="minute" />
            <input type="text" class="large init" data-label="Hour" id="hour" />
            <input type="text" class="large init" data-label="Day of Month" id="day" />
            <select class="init" data-label="Month of Year" id="month">
              <option value=""></option>
              <option value="*">*</option>
              <option value="1">January</option>
              <option value="2">February</option>
              <option value="3">March</option>
              <option value="4">April</option>
              <option value="5">May</option>
              <option value="6">June</option>
              <option value="7">July</option>
              <option value="8">August</option>
              <option value="9">September</option>
              <option value="10">October</option>
              <option value="11">November</option>
              <option value="12">December</option>
            </select>
            <select class="init" data-label="Day of Week" id="weekday">
              <option value=""></option>
              <option value="*">*</option>
              <option value="0">Sunday</option>
              <option value="1">Monday</option>
              <option value="2">Tuesday</option>
              <option value="3">Wednesday</option>
              <option value="4">Thursday</option>
              <option value="5">Friday</option>
              <option value="6">Saturday</option>
            </select>
          </div>
        </div>
      </div>
      <% text = (@edit ? "Create New Task" : "Create Task") %>
      <a class="btn primary" data-loading-text="Creating..." id="create_btn" ><%= text %></a>
      <% if @edit %>
        <a class="btn secondary" data-loading-text="Updating..." id="update_btn" >Update Task</a>
      <% end %>
      <a class="btn" id="cancel_btn">Cancel</a>
      <% if @edit %>
        <a class="btn danger" data-loading-text="Deleting..." id="delete_btn" >Delete Task</a>
      <% end %>
    </fieldset>
    </form>
    <%= VirtualMonkey::BOOTSTRAP_JS %>
    <%= VirtualMonkey::ACTIONS_JS %>
  </body>
</html>
