#!/usr/bin/env ruby

# Development ENV only
$LOAD_PATH.unshift(File.dirname(__FILE__))
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
###

ENV['ENTRY_COMMAND'] = File.basename(__FILE__, ".rb")

module VirtualMonkey
  RUNNING_AS_GEM = lambda {
    bin_dir = (`gem environment | grep "EXECUTABLE DIRECTORY"`.chomp =~ /DIRECTORY: (.*)$/ && $1)
    File.dirname(__FILE__) =~ Regexp.new(bin_dir) && true || false
  }
end

require 'rubygems'
require 'virtualmonkey'
require 'ruby-debug'
require 'irb'

# Trollop
default_log_file = File.join("", "tmp", "trace_file")
self_deployment = ENV['MONKEY_SELF_DEPLOYMENT_NAME'] if VirtualMonkey::Toolbox::find_myself_in_api()
self_deployment ||= "nil"

options = Trollop::options do
  opt :deployment, "Full deployment name",                                          :short => "-d", :type => :string,  :default => self_deployment
  opt :exclude_tests, 'Space-separated strings of tests to prevent from executing', :short => '-e', :type => :strings
  opt :features, "Feature file names",                                              :short => "-f", :type => :strings, :required => true
  opt :no_debug, "Disable all debugging",                                           :short => "-g", :type => :boolean
  opt :no_resume, "Do not resume; start test from scratch",                         :short => "-r", :type => :boolean
#  opt :post_mortem, "Enable Post Mortem debugging",                                 :short => "-s", :type => :boolean
  opt :tests, "Space-separated strings of tests to execute (default: all)",         :short => "-t", :type => :strings
#  conflicts :no_debug, :post_mortem
end

# Set up debugging mode
ENV['MONKEY_NO_DEBUG'] ||= "#{options[:no_debug]}"
if ENV['MONKEY_NO_DEBUG'] != "true" && ENV['ENTRY_COMMAND'] == "grinder" && options[:post_mortem]
  Debugger.start(:post_mortem => true) # Only start the debugger if post_mortem => true
end

# Get confirmation if its detected that this instance is in the selected deployment
unless ENV['MONKEY_NO_DEBUG'] =~ /true/i
  if options[:deployment] == ENV['MONKEY_SELF_DEPLOYMENT_NAME']
    confirm = ask("WARNING: You are about to run grinder on the deployment your virtualmonkey server is in. Are you sure you want to do this? (y/n)", lambda { |ans| true if (ans =~ /^[y,Y]{1}/) })
    raise "Aborting." unless confirm
  end
end

# Run
options[:tests] ||= []
features = [options[:features]].flatten
if features.length > 1
  test_cases = features.map_to_h { |feature| VirtualMonkey::TestCase.new(feature, options) }
  unless test_cases.unanimous? { |tc| tc.options[:runner] }
    raise ":runner options MUST match for multiple feature files"
  end
  unless test_cases.unanimous? { |tc| tc.options[:allow_meta_monkey] }
    raise ":allow_meta_monkey options MUST match for multiple feature files"
  end
  combo_feature = GrinderMonk.combo_feature_name(features)
  File.open(combo_feature, "w") { |f|
    f.write(features.map { |feature| "mixin_feature '#{feature}', :hard_reset" }.join("\n"))
  }
  test_case = VirtualMonkey::TestCase.new(combo_feature, options)
else
  test_case = VirtualMonkey::TestCase.new(options[:features].first, options)
end

test_case.run(*options[:tests])

puts "Grinder run successful!".apply_color(:green)
